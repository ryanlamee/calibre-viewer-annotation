(include "./macro")

;; make sure init.sib has been run!
;; reload css
(scoped
 (var all-link (document.getElementsByTagName "link")
      i 0)
 (while (< i all-link.length)
        (var link (get all-link i))
        (when (< -1 (|> (link.getAttribute "type")
                        (.indexOf "css")))
              (console.log "reload " link)
              (assign link.href (+ link.href "?t=" (|> (new Date)
                                                       .getTime))))
        (incr i)))

(console.log "import model")
(const model (require "./js/model"))
(const Annotation (get model "Annotation")
       Book (get model "Book")
       KindleAnnotation (get model "KindleAnnotation")
       CalibreAnnotation (get model "CalibreAnnotation"))


;; annotation interaction
(var mAnnot {view: (lambda (ctrl ann)
                           (m "div.tr"
                              [(m "div.td .date-string"
                                  (|> ann.created
                                      (.toString)
                                      (.substr 0 10)))
                                (m "div.td" ann.text)
                                (m "div.td" ann.quote)]))})
(var m-ann {vm: (scoped
                 (var vm {})
                 (assign vm.init
                         (#>
                          (assign vm.book (m.prop null)
                                  vm.list (m.prop [])
                                  vm.query (m.prop "")
                                  vm.ignorecase (m.prop true))))
                 vm)
             controller: (#> (m-ann.vm.init))
             view: (lambda ()
                           (var book (m-ann.vm.book))
                           (ternary book
                                    (m "div"
                                       [(m "h3" [book.title
                                                  " "
                                                  (m "button[type=button]"
                                                     {onclick: (#> (find-and-open-epub-by-id book.id))}
                                                     "open")
                                                  ])
                                         (m "div"
                                            [(m "input" {onkeyup: (m.withAttr "value" m-ann.vm.query)
                                                          value: (m-ann.vm.query)
                                                          })
                                              (m "label"
                                                 [(m "input[type=checkbox]"
                                                     {onclick: (m.withAttr "checked" m-ann.vm.ignorecase)
                                                       checked: (m-ann.vm.ignorecase)})
                                                   "case insensitive search"
                                                   ])])
                                         (m "div.table"
                                            (scoped
                                             (var rtn [(m "div.tr"
                                                          [(m "div.th" "date")
                                                            (m "div.th" "text")
                                                            (m "div.th" "quote")])]
                                                  RE (new RegExp
                                                          (m-ann.vm.query)
                                                          (ternary (m-ann.vm.ignorecase) "i" "")))
                                             (each ann (m-ann.vm.list)
                                                   (when (or (and ann.quote (ann.quote.match RE))
                                                             (and ann.text (ann.text.match RE)))
                                                         (rtn.push (m.component mAnnot ann))))
                                             rtn))
                                         ])
                                    (m "div" "select a book"))
                           )})

(m.mount (document.getElementById "annotation-panel")
         {controller: m-ann.controller view: m-ann.view})

(def refresh-annotation-list ()
     (var book (m-ann.vm.book))
     (when book
           (a-db.serialize
            (#>
             (m.startComputation)
             (var ann-list [])
             (a-db.each (a-sql.getAnnotationsWithTitleLike {title: (+ "%" book.title "%")})
                        (lambda (err row)
                                ;; (console.log row.id)
                                (ann-list.push (new Annotation row)))
                        (#>
                         (console.log ann-list.length)
                         (m-ann.vm.list ann-list)
                         ;; trigger rerender
                         (m.endComputation)))))))


(def find-and-open-epub-by-id (book-id)
     (c-db.serialize
      (#>
       (c-db.each (c-sql.getEpubPathInfoById book-id)
                  (lambda (err row)
                          ;; (console.log "loading " row.id)
                          (var epub-filepath (path.join $CALIBRE-HOME
                                                        row.path
                                                        (+ row.name ".epub")))
                          (console.log
                           (+ "opening: " epub-filepath "..."))
                          (try
                           (scoped (fs.statSync epub-filepath)
                                   (exec (+ "ebook-viewer '" epub-filepath "'")))))))))

;; book interaction
(var mBook {view: (lambda (ctrl book)
                          (var active-book (m-ann.vm.book))
                          (m "div.tr"
                             [(m "div.td .book-id" book.id)
                               (m "div.td"
                                  [(ternary (and active-book
                                                 (= active-book.title book.title))
                                            (m "b"
                                               book.title)
                                            (m "a"
                                               {href: "#"
                                                 onclick: (lambda (evt)
                                                                  (m-ann.vm.book book)
                                                                  (refresh-annotation-list))}
                                               book.title))])
                               (m "div.td" book.author_sort)]))})

(var m-bk {vm: (scoped
                 (var vm {})
                 (assign vm.init
                         (#>
                          (assign vm.list (m.prop [])
                                  vm.query (m.prop "")
                                  vm.ignorecase (m.prop true))))
                 vm)
            controller: (#> (m-bk.vm.init))
            view: (#>
                   (m "div"
                      [(m "h3" "search for books in calibre DB")
                        (m "div"
                           [(m "input" {onkeyup: (m.withAttr "value" m-bk.vm.query)
                                         value: (m-bk.vm.query)
                                         })
                             (m "label"
                                [(m "input[type=checkbox]"
                                    {onclick: (m.withAttr "checked" m-bk.vm.ignorecase)
                                      checked: (m-bk.vm.ignorecase)})
                                  "case insensitive search"
                                  ])])
                        (m "div.table" (scoped
                                        (var RE (new RegExp (m-bk.vm.query)
                                                     (ternary (m-bk.vm.ignorecase) "i" ""))
                                             rtn [])
                                        (each book (m-bk.vm.list)
                                              (when (or (book.title.match RE)
                                                        (book.author_sort.match RE))
                                                    (rtn.push (m.component mBook book))))
                                        rtn))]))})

(m.mount (document.getElementById "book-panel")
         {controller: m-bk.controller
           view: m-bk.view})

;; load books
(def load-book-list ()
     (c-db.serialize
      (#>
       (console.log "loading books...")
       (m.startComputation)
       (var book-list [])
       (c-db.each (c-sql.getAllEpubBooks)
                  (lambda (err row)
                          ;; (console.log "loading " row.id)
                          (book-list.push (new Book row)))
                  (#>
                   (m-bk.vm.list book-list)
                   (m.endComputation))))))

;; (clipboard.writeText "TSET!!")


;; <cheap tab switcher>
(var m-tab
     {vm: (scoped
           (var vm {panel-list []})
           (assign vm.init
                   (#>
                    (var i 0
                         el-list (document.getElementsByClassName "tab-panel"))
                    (while (< i el-list.length)
                           (var panel (get el-list i))
                           (m-tab.vm.panel-list.push panel)
                           (incr i))
                    ))
           vm)
       view: (#(ctrl)
               (m "ul"
                  (scoped
                   (var body [])
                   (each panel m-tab.vm.panel-list
                         (var panel-id (panel.getAttribute "id"))
                         (body.push (m "li"
                                       {onclick: (#(evt)
                                                   (var i 0
                                                        sw-list evt.target.parentNode.childNodes)
                                                   (while (< i sw-list.length)
                                                          (|> (get sw-list i)
                                                              (.setAttribute "class" ""))
                                                          (incr i))
                                                   (evt.target.setAttribute "class" "active")
                                                   (each p m-tab.vm.panel-list
                                                         (p.setAttribute
                                                          "class"
                                                          (.concat "tab-panel"
                                                                   (ternary (= panel-id (p.getAttribute "id"))
                                                                            " active" "")))))}
                                       panel-id))
                         )
                   body)))})
(m.mount (document.getElementById "tab-switcher")
         {controller: m-tab.vm.init
           view: m-tab.view})
;; </cheap tab switcher>


(load-book-list)



(var EPub      (require "epub")
     striptags (require "striptags")
     jsyaml    (require "js-yaml")
     entities  (scoped (var Entities (get (require "html-entities") "AllHtmlEntities"))
                       (new Entities))
     Range (get (require "xpath-range") 'Range))







(var epub null
     yml null
     
     failure-list []
     arr-pres []
     html-map {}
     spine-map {}
     re-whitespace (new RegExp "\\s+")
     output {} ;; global result cache

     cfijs-path (path.join __dirname "js" "cfi.js")

     ;; FIXME
     ;; globals used by searchlogic
     yml {highlight_list: []}
     
     )

(def save-output-to-file (filepath)
     ;; if filepath is null, get it from dialog box
     (if filepath
         (do
          (console.log (+ "saving " (get (Object.keys output) 'length)
                          " items to " filepath))
          (fs.writeFile filepath (JSON.stringify output null 2)))
         
         true
         (dialog.showSaveDialog
          (#(filepath)
            (when filepath
                  (save-output-to-file filepath))))))

;; yml viewer
(var m-fcontent
     {vm: (scoped
           (var vm {})
           (assign vm.init
                   (#> (assign vm.file-path (m.prop null)
                               vm.content (m.prop null))))
           vm)
       view: (#(ctrl)
               (m "div"
                  (scoped
                   (var fc (m-fcontent.vm.content)
                        body [])
                   (body.push
                    (m "pre"
                       (ternary fc
                                (+ "selected: "
                                   (m-result.vm.title)
                                   "; file length: "
                                   fc.length)
                                "select a file")))
                   body)))
       })
(m.mount (document.getElementById "file-content")
         {controller: m-fcontent.vm.init view: m-fcontent.view})


;; for reconcile all; note this is intended to clobber searchlogic.sib::reconcile-all()
(var reconciler-interval 500
     reconciler-timer null)
(def reconcile-all ()
     (var i 0
          book-title (m-result.vm.title)
          entry-list (m-result.vm.entry-list)
          check-proc (#>
                      (console.log i)
                      (var entry (get entry-list i)
                           verf (entry.verification)
                           maybe-match null)
                      ;; is it already in db?
                      (when verf.annotation
                            (assign maybe-match
                                    (acache.find-match book-title (first verf.annotation.ranges))))
                      (console.log "MAYBE?")
                      (console.log maybe-match)
                      (if maybe-match
                          (do
                           ;; already in db, skip!
                           (console.log (concat "%calready in db, skipping:%c " entry.highlight)
                                        "color:white;background:green;" "color:none;"))

                          true
                          (do
                           (var entry-id (make-entry-id entry)
                                result (get all-result entry-id))
                           (when (and result
                                      result.source)
                                 (launch-and-find result.source entry))
                           ))
                      (incr i)
                      (if (< i entry-list.length)
                          (do
                           (console.log (+ "running" (+ 1 i) " of " entry-list.length))
                           (assign reconciler-timer
                                   (setTimeout check-proc reconciler-interval)))

                          true (m.endComputation))))
     (m.startComputation)
     (assign reconciler-timer
             (setTimeout check-proc reconciler-interval)))


(var m-result
     {hdr-list: ["check?" "info"
                 "quote" "text" ;; annotation model
                 "verification"
                 "in db?"]
      vm: (scoped
           (var vm {})
           (assign vm.init
                   (#>
                    (assign vm.title (m.prop null)
                            vm.entry-list (m.prop []))))
           vm)
      view: (#(ctrl)
              (var vm m-result.vm)
              (m "div"
                 [(m "button"
                     {onclick: (#> (reconcile-all))}
                     "RECONCILE ALL")
                  (m "button"
                     {onclick: (#> (clearInterval reconciler-timer))}
                     "terminate reconcilation process")
                  (m "button"
                     {onclick: (#> (save-output-to-file))}
                     "save output to file")
                    
                  (m
                   "div"
                   (m "table"
                      (scoped
                       (var body [(m "tr" (.map m-result.hdr-list (#(k) (m "th" k))))])
                       (each entry (vm.entry-list)
                             (var entry-id (make-entry-id entry)
                                  result (or (get all-result entry-id) {}))
                             (body.push
                              (m "tr"
                                 (m-result.hdr-list.map
                                  (#(hdr)
                                    (var entry-val (get entry hdr)
                                         score (get result 'score))
                                    (m "td"
                                       (if (= hdr "check?")
                                           (m "button"
                                              {onclick: (#>
                                                         (console.log "CLICK CHECK!")
                                                         (console.log result)
                                                         (when result.source
                                                               (console.log entry)
                                                               (m.startComputation)
                                                               (launch-and-find result.source entry))
                                                          
                                                         )}
                                              "check")

                                           (= hdr "info")
                                           (m "div"
                                              [(ternary (and score (< 0 score))
                                                        (scoped
                                                         (m "div"
                                                            {class: "yes-found"}
                                                            (+ ""
                                                               (|> score
                                                                   (.toFixed 3))
                                                               " "
                                                               result.source)))
                                                        (m "div" {class: "not-found"}))
                                               (m "div"
                                                  (if (not (and entry.startLocation
                                                                entry.endLocation))
                                                      ""
                                                      (+ ""
                                                         entry.startLocation "~"
                                                         entry.endLocation " ("
                                                         (- entry.endLocation entry.startLocation)
                                                         ")")))
                                               (m "div"
                                                  (if (not entry.timestamp)
                                                      ""
                                                      (.toString (new Date entry.timestamp))))])

                                           ;; leave blank on init
                                           (= hdr "verification")
                                           (scoped
                                            (var verf (entry.verification))
                                            (m "div"
                                               {id: (+ "td-sel-" entry-id)
                                                class: "td-sel"
                                                style: {background-color: (ternary verf.score
                                                                                   (score2rgb verf.score)
                                                                                   "")}}
                                               (get verf 'content)))

                                           (= hdr "in db?")
                                           (m "div"
                                              (scoped
                                               (var db-entry (entry.db-entry)
                                                    verf (entry.verification))
                                               (if db-entry
                                                   db-entry.quote

                                                   verf.annotation
                                                   (m "button"
                                                      {onclick: (#>
                                                                 (m.startComputation)
                                                                 (var new-annotation { created: (|> (new Date entry.timestamp)
                                                                                                    (.toISOString)
                                                                                                    (replace "T" " "))
                                                                                      updated: (|> (new Date)
                                                                                                   (.toISOString)
                                                                                                   (replace "T" " "))
                                                                                      title: verf.annotation.title
                                                                                      text: entry.note
                                                                                      quote: entry.highlight
                                                                                      extras: verf.annotation.extras
                                                                                      uri: verf.annotation.uri
                                                                                      user: $USERNAME})
                                                                 (a-db.serialize
                                                                  (#>
                                                                   ;; BAD!
                                                                   ;; (a-db.run (a-sql.insertAnnotation new-annotation))
                                                                   ;; the quote escaping is incredibly nasty >:-(
                                                                   ;; manually convert it to a parameterized query
                                                                   (a-db.run
                                                                    (|> (a-sql.insertAnnotation)
                                                                        (replace-all "null" "?"))
                                                                    [ new-annotation.created
                                                                     new-annotation.updated
                                                                     new-annotation.title
                                                                     new-annotation.text
                                                                     new-annotation.quote
                                                                     (JSON.stringify new-annotation.extras)
                                                                     new-annotation.uri
                                                                     new-annotation.user])
                                                                   (a-db.serialize
                                                                    (#>
                                                                     (a-db.get (a-sql.getLastInsertedId)
                                                                               (#(err row)
                                                                                 (console.log "INSERTED:" row.id)
                                                                                 (assign new-annotation.id row.id)
                                                                                 ;; append range object
                                                                                 (var rng (get verf.annotation.ranges 0)
                                                                                      sql (a-sql.appendRangeToAnnotation
                                                                                           { :start       rng.start
                                                                                            :end         rng.end
                                                                                            :startOffset rng.startOffset
                                                                                            :endOffset   rng.endOffset
                                                                                            :annotation_id new-annotation.id}))
                                                                                 (console.log sql)
                                                                                 (a-db.run sql
                                                                                           (#(err row)
                                                                                             (entry.db-entry new-annotation)
                                                                                             (m.endComputation)
                                                                                             (console.log "OK!!!!")))
                                                                                 ))))))
                                                                  
                                                                  
                                                                 ;; (entry.db-entry )
                                                                 )}
                                                      "add to db")

                                                   true
                                                   "")))

                                           true
                                           (m "div" (ternary entry-val
                                                             (m.trust entry-val)
                                                             ""))))
                                     
                                    ))))
                              
                             )
                       body
                       )))])
              )

      })

(m.mount (document.getElementById "result-display")
         {controller: m-result.vm.init view: m-result.view})


;; FIXME: unify arr-pres and skip this inefficiency
(def get-source-html (source-path)
     (var rtn null)
     (each pres arr-pres
           (if rtn (return))
           (if (= pres.href source-path)
               (assign rtn (get html-map pres.id))))
     rtn)

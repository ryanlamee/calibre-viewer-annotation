(include "./macro")
(console.log "utility included.")

(const object-hash (require "object-hash"))
(const entities  (scoped (var Entities (get (require "html-entities") "AllHtmlEntities"))
                         (new Entities)))

(const re-whitespace (new RegExp "\\s+"))

;; utility
(def score2rgb (score)
     (var r 0
          g 0
          b 0)
     (ternary (< 0.5 score)
              (scoped
               (assign r (Math.floor (* 255 (- 1 (* 2 (- score 0.5))))))
               (assign g 255))
              (scoped
               (assign r 255)
               (assign g (Math.floor (* 255 (- 1 (* 2 (- 0.5 score))))))))
     (+ "rgb(" (Math.floor r) "," (Math.floor g) "," b ")"))

(def make-entry-id (entry)
     (object-hash entry))

(def clean-string (s)
     (entities.decode
      (pipe s
            (replace "\\s+$" "")
            (replace "^\\s+" ""))))

(def get-numeric (s)
     (parseFloat (replace-all s "\\D" "")))

(def get-corpus-coverage (corpus token-list)
     ;; a quick and dirty way to assess whether we should
     ;; assume a match is found. corpus is assumed to be
     ;; a fair bit longer than token_list. we want to see
     ;; whether most of `token_list` exists in `corpus`.
     ;; A better method would be to first extract all text
     ;; in corpus, and minify it (remove extraneous spaces
     ;; and symbols), then get something like levenshtein
     ;; distance.
     (var hit-count 0
          offset 0)
     (each token token-list
           (var found-index (pipe offset
                                  (corpus.substr)
                                  (.indexOf token)))
           (when (< -1 found-index)
                 (incr hit-count)
                 (assign offset (+ offset found-index))))
     hit-count)

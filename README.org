* adding annotation (read and write) capability to calibre's ebook-viewer
  
  sporadic work in progress.

  previously titled "hackery to make calibre's viewer show (not make)
  annotations". other OSS developments make this much closer than the
  earlier approach documented here. this is less of a README now than
  it is notes on my progress.

  There are 2 main issues we care about here.

  1. importing, i.e. reading annotations made elsewhere
  2. editing, i.e. displaying and editing annotations in calibre's =ebook-viewer= program
  
* development

   currently lauching the program this way:

   #+begin_src sh :eval never
     CALIBRE_DEVELOP_FROM=../calibre-src/src calibre-debug -w path-to.epub
   #+end_src

* current approach (2013-11-09)

  for former findings from fiddling around, find the final figment: [[2013-11-07]]
  
  a couple of things have surfaced.

  1. we now get unfettered access to the web inspector without hacking
     (maybe i just missed it from the beginning?)
     
  2. https://github.com/okfn/annotator presents a better coordinated
     effort on annotation.  we want to ski along this path. but we
     have a slightly different problem here.  first, we have to worry
     about annotation format conversions (from kindle, mantano,
     ibooks, hand written, etc).  for a single-user use case, much of
     the data in
     https://github.com/okfn/annotator/wiki/Annotation-format is
     superfluous.  second, related to the first, is that we expect
     annotation sources to be unpredictable. so we should assume that
     not only do we not have xpaths to play with, but offsets are
     unreliable. see tom phelp's work on the topic
     http://www9.org/w9cdrom/312/312.html. so we will look into
     working on a plugin for annotator that derives locations via an
     inexact process. a simple demo is in =anchortext.py=
     
  3. in interest of better future interoperability and usability with
     calibre, we will move away from the ad-hoc yml files described
     here and use a (pluggable) local backend. for the short term,
     https://pypi.python.org/pypi/unqlitepy looks like a good candidate.

  4. for local storage, we don't want to run a whole webserver.  if
     there's no easy way to do this, we will trick annotator to
     interface with the python bridge (instead of making HTTP
     requests), and call =UnQLite= through the modified
     =ebook-viewer=.

** 2013-11-10

*** BKKH 忘却回避

    using a test book, http://www.gutenberg.org/ebooks/76 with images.

**** unqlitepy

     see https://github.com/nobonobo/unqlitepy/blob/develop/unqlitepy/__init__.py

     - sudo pip install 'ctypesgen>=0.0.dev0' ## without qualifier, it complains about no satisfactory version
     - sudo pip install unqlitepy ## needs ctypesgen first

*** TODO step 1: create simplified annotation interface using unqlitepy

    - starting with https://github.com/okfn/annotator-store.
      bypassing the ElasticStorage dep is a real headache.
    - see https://github.com/nickstenning/annotator-store-flask/, it
      is much faster to get started than by using the official
      up-to-date version!!! this uses sqlite. maybe after all we are
      better off with that.

**** here's where we are now:

     [[./doc/img/ss-003.png]]

     one problem is now the viewer's hotkeys are interfering with the
     typing. if you press space / backspace the page jumps forward and
     backward

*** DONE step 2: investigate how storage works in annotator.js
    CLOSED: [2013-11-10 Sun 16:05]

    to butcher or to plugin?

    for R/W from the viewer, the easiest route seems like overriding
    the =$.ajax= call with a call to =py_bridge=

*** DONE step 3: do away with HTTP through python bridge
    CLOSED: [2013-11-10 Sun 16:06]

    basically reroute all the =app.route= parts to direct js->python calls

**** we have create, read, add, update working here:

     [[./doc/img/ss-004.png]]

     annotations are stored to the sqlite database managed by nick
     stenning's flask annotator-store, without the flask dependency

     the hotkey interference can be overcome by changing the
     keybindings in the ebook viewer preferences.

** 2013-11-11

*** TODO update =uri= field to be unique to the book + informative about location

    a hint about what we can do is in =main.py:load_ebook()=, where it initializes =self.toc_model=

    also a hint of how the location is stored is in =toc_clicked()=.

    the =item= object is a =TOCItem= defined in =toc.py=.

    it holds a =fragment= attr that seems to correspond to an in-document anchor like =file:///...#fragment=

    for our annotation anchoring we may want =toc.href= with =TOCItem.fragment=

*** =spine= is a good candidate

    =spine= is of type =calibre.ebooks.oeb.iterator.spine.SpineItem=
    though it's basically a =unicode= derivative

    appears to be a list of paths to files that are unpacked from the
    epub, corresponding to the book sections in the epub. so we are
    interested in using these, minus the tmp file part, to anchor the
    notes.

    for /huck finn/ an example =spine= looks like this:

    ~/tmp/calibre_1.10.0_tmp_A8r6Yt/8PLU4E_ebook_iter/76/@public@vhost@g@gutenberg@html@files@76@76-h@76-h-12.htm.html~

    looks like =/76/@public@vhost@g@gutenberg@html@files@76@76-h@76-h-12.htm.html= is a stable portion,

    and the stuff before that changes on every load through =ebook-viewer=

    no actually here we want the stuff following =@public=. we want
    =metadata.TOC='s =href= and =fragment= for anchoring; then =text=
    for the actual referenced note

*** hacking in a notes view in the fashion of the TOC

    essentially we want to copy =TOCView= and show notes in it

    relevant code in =main_ui.py= and =toc.py=

    we will start by subclassing class =TOC= which is the viewer model

**** need a =base_path= from the =spine= argument

     =spine= comes from =EbookIterator=; the random =base_path= is set
     in =book.py= by =self._tdir = TemporaryDirectory('_ebook_iter')=,
     though it doesn't seem to get set explicitly in the =spine=
     object, so *HACK it back together by os.path.split* on =spine=

*** current progress

    the duplicate table of contents button opens the Notes pane

     [[./doc/img/ss-005.png]]
    
*** current issues

     - the jump-to-location from clicking the entry is broken
     - on re-opening the ebook, the highlights don't always end up in
       the same place. what's happening is that the rendering function
       is taking annotations meant for another section, and finding
       the matching element and putting them there. in other words, if
       you were currently in the right section, they would still
       appear correctly, except in other sections, the highlights
       would /also/ appear there, at the matching xpath.
     - the notes pane is loaded once on program start, so adding notes
       will not update it
       
* notes from old attack (until 2013-11-08)

  this basically documents some poking around.

** 2013-02-19

   succeeded in conjuring up the QWebInspector window from the document viewer, as well as execute arbitrary javascript

   =waitok()= is a poor man's blocking function to check where we are... i =touch /tmp/okgo= to resume execution. this is because =raw_input()= started throwing exceptions once you get too deep into the Qt app's control (my guess). Thankfully didn't use this too much.

=== modified file 'src/calibre/gui2/viewer/documentview.py'
--- src/calibre/gui2/viewer/documentview.py	2013-02-18 07:24:55 +0000
+++ src/calibre/gui2/viewer/documentview.py	2013-02-20 03:17:49 +0000
@@ -5,6 +5,16 @@
 
 # Imports {{{
 import os, math, json
+import time
+def waitok(msg = ""): # poor man's blocker
+    okgo_filepath = "/tmp/okgo"
+    mycount = 0
+    while not os.path.exists(okgo_filepath):
+        mycount += 1
+        print("waiting for okgo %s %s" % (msg, mycount))
+        time.sleep(1)
+    os.unlink(okgo_filepath)
+
 from base64 import b64encode
 from functools import partial
 
@@ -13,6 +23,7 @@
         QIcon, pyqtSignature, QAction, QMenu, QString, pyqtSignal,
         QSwipeGesture, QApplication, pyqtSlot)
 from PyQt4.QtWebKit import QWebPage, QWebView, QWebSettings, QWebElement
+from PyQt4.QtWebKit import QWebInspector
 
 from calibre.gui2.viewer.flip import SlideFlip
 from calibre.gui2.shortcuts import Shortcuts
@@ -551,6 +562,10 @@
         self.restore_fonts_action.setCheckable(True)
         self.restore_fonts_action.triggered.connect(self.restore_font_size)
 
+        # self.settings().setAttribute(
+        #     QWebSettings.WebAttribute.DeveloperExtrasEnabled, True)
+        self.inspect = QWebInspector()
+
     def goto_next_section(self, *args):
         if self.manager is not None:
             self.manager.goto_next_section()
@@ -851,6 +866,11 @@
             else:
                 self.flipper(self.current_page_image(),
                         duration=self.document.page_flip_duration)
+        print "EVALING JS"
+        js = "for(var lsp = document.getElementsByTagName('p'), i = 0; i < lsp.length; ++i) { lsp[i].innerHTML = '<span style=\"background-color: green;\">' + lsp[i].innerHTML + '</span>'; };"
+        self.page().mainFrame().evaluateJavaScript(js)
+        self.inspect.setPage(self.page())
+        self.inspect.show()
 
     @classmethod
     def test_line(cls, img, y):

** 2013-02-22

   Here is an example note entry that was loosely converted to orgmode:

#+begin_example
: ,* Title: Listing 8.1. An impl... (p.187)
: 
: Highlighted text
: ......................................
: Listing 8.1. An implementation of eval taking a local context
: ......................................
: 
: [2012-11-29 12:03]
: 
: - - - - - - - - - - - - - - - - - - - - - - - - - -
: 
: 
#+end_example

   The page number is from Mantano, which is probably matched up with the reader, factoring its current viewing size (i.e. it changes all the time), and gets outputted as-is on export. IOW, aside of telling us about relative order, is mostly useless unless we figure out the page number mapping to ebook location in calibre's viewer. Not worth the time.

   convert that to yaml:

#+begin_example
  - lookup: Listing 8.1. An impl... (p.187)
    highlight: |
      Listing 8.1. An implementation of eval taking a local context
    time: 2012-11-29 12:03
  
#+end_example
   
   =pip install epub=

   read it with this script to test:

#+begin_src python :eval never
  import yaml
  import epub
  import re
  
  book = epub.open_epub("test.epub")
  
  lsnote = yaml.load(open("note.yml"))
  
  mydc = dict((key, book.read_item(item)) for key, item in filter(lambda (k, i): k.startswith("html"), book.opf.manifest.items()))
      
  for key in sorted(mydc.keys(), lambda a, b: int(a[4:]) > int(b[4:]) and 1 or -1):
      xml = mydc[key]
      nidx = 0
      while nidx < len(lsnote):
          note = lsnote[nidx]
          lookup = note['lookup'].split('...', 1)[0]
          if lookup in re.sub('<[^>]*>', '', xml).replace('\n', ''):
              print "FOUND", key
              del lsnote[nidx]
          else:
              nidx += 1
  
#+end_src

#+RESULTS:
: FOUND html13
: FOUND html22
: FOUND html22
: FOUND html22

now we know we can locate the lookup (assuming all highlights are long enough).

next is to coerce calibre's viewers to change its markup at the right places

*** Manning epubs

    it turns out the example book here, Fogus's /The Joy of Clojure/, has a bunch of calibre markup in it: looks like Manning is running a calibre converter in the backend?

** 2013-02-23

*** adding manhole

    following =CalibrePluginScaleATon= to inject a manhole

    for emacs, change the telnet prompt regexp to make interaction easier:

    #+begin_src emacs-lisp
    ;; default: (defvar telnet-prompt-pattern "^[^#$%>\n]*[#$%>] *")
    (setq telnet-prompt-pattern "^>>> *")
    #+end_src

*** jack into =DocumentView.load_finished=

    we're looking for location information that corresponds to nth file
    as obtained from the test.epub/note.yml matchup
    
    #+begin_example
      >>> see(self)
          .*                      hash()                  repr()
          str()                   .DISABLED_BRUSH         .DrawChildren
          .DrawWindowBackground   .IgnoreMask             .PaintDeviceMetric()
          .PdmDepth               .PdmDpiX                .PdmDpiY
          .PdmHeight              .PdmHeightMM            .PdmNumColors
          ...
          ...
          ...
          .windowRole()           .windowState()          .windowTitle()
          .windowType()           .x()                    .x11Info()
          .x11PictureHandle()     .y()                    .zoomFactor()
      >>> self.page.__doc__
      'QWebView.page() -> QWebPage'
      >>> print(self.page().mainFrame().toHtml()[:200])
      <!--?xml version='1.0' encoding='utf-8'?--><html xmlns:mbp="Kindle" xmlns="http://www.w3.org/1999/xhtml"><head>
          <title>The Joy of Clojure: Thinking the Clojure Way</title>
          <meta content="http:
      
    #+end_example

*** =src/calibre/gui2/viewer/main.py=

    this is where the =EbookViewer= class and the =DocumentView='s =manager= is defined

*** calibre's epub caching + rendering

    so calibre's ebook viewer uses a calibre library (I think) that writes html files to a temp directory

    where each html corresponds to a major section, which calibre paginates in smaller pieces while reading. When a file boundary is crossed (probably always the case in changing chapters), the corresponding file is loaded; crossing these boundaries calls =EbookViewer.next_document= and =EbookViewer.previous_document=, which calls =DocumentView.load_path=, which calls =calibre.ebooks.oeb.display.webview.load_html=

*** matching up with =epub= manifest (not going to work?)

    the total number of html files in that directory matches the total retrieved by the =epub= library,
    but the labeling order doesn't match up: in this example, calibre's extraction looks like =kindle_split_012.html=
    but the content corresponding to =epub='s =html12= key resides in a different file.

    so to be quick and dirty we'll just build up a cache of all the notes, and search through the full text
    of the currently viewed page

*** calibre.ebooks.oeb.display.webview

    =load_html= function is where the epub's html gets extracted and set


** 2013-02-24

   opting for a naive hack that works for at least 3 test notes on at least 1 test book:
   
   [[./doc/img/ss-001.png]]

   The grunt work is in =AnnotationProcessor.py= and is untested hackery. Basically, after calibre's viewer (=calibre/gui2/viewer/documentview.py=) calls =load_html=, we grab that value and send it the Processor and re-set it. The processor:

   1. removes all extra whitespace, perserving newlines (important because there are =<pre>= blocks), call this the =cleanstring=-ed html
   2. we locate start and end indexes for non-tag elements
   3. create a temporary "fulltext" from concatenating all non-tag elements
   4. match this against the notes lookup (again, assume all are long enough and copy-pasted extractions) and locate indexes from matches
   5. surround matched strings with highlight tags (=tagged= template)
   6. using the non-tag start and end indexes, grab the tags by substring and reconstruct the html
   7. re-run =self.setHTML= on the processed html
      
   So the important lines in =calibre/gui2/viewer/documentview.py= are:

   #+begin_src python :eval never
     # at top
     import AnnotationProcessor
     
     # ...
     # ...
     # ...
     
     def load_path(self, path, pos=0.0):
         self.initial_pos = pos
         self.last_loaded_path = path
     
         def callback(lu):
             self.loading_url = lu
             if self.manager is not None:
                 self.manager.load_started()
     
         load_html(path, self, codec=getattr(path, 'encoding', 'utf-8'), mime_type=getattr(path,
             'mime_type', 'text/html'), pre_load_callback=callback,
                   force_as_html=True)
     
         # intercept + hack in our highlights
         myhtml = self.page().mainFrame().toHtml()
         newhtml = AnnotationProcessor.process_html(AnnotationProcessor.note, str(myhtml).decode("utf-8"))
         self.setHtml(newhtml, self.page().mainFrame().url())
     
         # the rest as usual
         
         entries = set()
         for ie in getattr(path, 'index_entries', []):
             if ie.start_anchor:
                 entries.add(ie.start_anchor)
             if ie.end_anchor:
                 entries.add(ie.end_anchor)
         self.document.index_anchors = entries
     
         # ...
   #+end_src

   =AnnotationProcessor.py= expects you have a =note.yml= file sitting in its path. Next steps are to make that more intelligent.

   
   
** 2013-03-03

   Add highlight color specification to =AnnotationProcessor= + slightly more intelligent note lookup.

   You need to set the =NOTE_DIR= variable in =AnnotationProcessor.py=, where it looks for a =yml= file of the title of the book. Currently it's hard coded to
   
   =NOTE_DIR = os.path.expanduser("~/note/org/book")=
   
   [[./doc/img/ss-002.png]]

   the new note box shows a popup with the highlighted original text... because the highlight doesn't always get the right text.

   

** 2013-11-07

   it turns out the aforementioned method of calling the inspector now
   causes a conflict with ebook-viewer's own inspector (did it used to
   have one?). so we should strip out the =self.inspect = ...= parts.

   in fact it seems like the self.inspect version doesn't share the
   javascript resources that the other inspect loads. don't know why,
   don't care now.

*** annotator

   this is the annotation format used in https://github.com/okfn/annotator/wiki/Annotation-format

#+BEGIN_SRC json :eval never
  {
    "id": "39fc339cf058bd22176771b3e3187329",  # unique id (added by backend)
    "annotator_schema_version": "v1.0",        # schema version: default v1.0
    "created": "2011-05-24T18:52:08.036814",   # created datetime in iso8601 format (added by backend)
    "updated": "2011-05-26T12:17:05.012544",   # updated datetime in iso8601 format (added by backend)
    "text": "A note I wrote",                  # content of annotation
    "quote": "the text that was annotated",    # the annotated text (added by frontend)
    "uri": "http://example.com",               # URI of annotated document (added by frontend)
    "ranges": [                                # list of ranges covered by annotation (usually only one entry)
      {
        "start": "/p[69]/span/span",           # (relative) XPath to start element
        "end": "/p[70]/span/span",             # (relative) XPath to end element
        "startOffset": 0,                      # character offset within start element
        "endOffset": 120                       # character offset within end element
      }
    ],
    "user": "alice",                           # user id of annotation owner (can also be an object with an 'id' property)
    "consumer": "annotateit",                  # consumer key of backend
    "tags": [ "review", "error" ],             # list of tags (from Tags plugin)
    "permissions": {                           # annotation permissions (from Permissions/AnnotateItPermissions plugin)
      "read": ["group:__world__"],
      "admin": [],
      "update": [],
      "delete": []
    }
  }


#+END_SRC


*** hacking the stylesheet

    we want jack into where calibre applies the "User Style Sheet"

    http://manual.calibre-ebook.com/viewer.html#customizing-the-look-and-feel-of-your-reading-experience

    this is applied in =documentview.py:set_user_stylesheet()=. We will forcibly append the =annotator= stylesheet

    #+BEGIN_SRC python :eval never
      # ...
      
          def set_user_stylesheet(self, opts):
              bg = opts.background_color or 'white'
              brules = ['background-color: %s !important'%bg]
              prefix = '''
                  body { %s  }
              '''%('; '.join(brules))
              if opts.text_color:
                  prefix += '\n\nbody, p, div { color: %s !important }'%opts.text_color
              ANNOTATOR_CSS = open("./lib/annotator.1.2.7/annotator.min.css").read()
              raw = prefix + opts.user_css + ANNOTATOR_CSS
              raw = '::selection {background:#ffff00; color:#000;}\n'+raw
              data = 'data:text/css;charset=utf-8;base64,'
              data += b64encode(raw.encode('utf-8'))
              self.settings().setUserStyleSheetUrl(QUrl(data))
      
      
      # ...
    #+END_SRC

    we want to utilize =documentview.py:load_javascript_libraries()=
    to inject the =annotator= libraries. this function gets called once.

    inside the function, =P(...)= (defined in =src/odf/text.py=) gives
    a resource path relative to the =resources= directory within
    calibre running instance's root path. i.e. if you're running the
    default calibre, that will be =/opt/calibre=; else it maps to
    something like =CALIBRE_DEVELOP_FROM/../resources= if you run with
    the command described above.

    inside =resources/viewer= we find e.g. mathjax.
    
    this leads us to =javascript.py= (can't believe i missed this...)

    and we specify javascript in =javascript.py:JavaScriptLoader:JS=,
    which gets loaded via =javascript.py:JavaScriptLoader:get=.

    this gets called on =documentview.__init__= so for hacking
    purposes we want monkeypatch =JavaScriptLoader= first in
    =documentview.py=.  later we can consider moving it to
    =javascript.py= but now we want to avoid messing with calibre's
    directory hierarchy so we can use bower. so we'll stick the full
    path into =JavaScriptLoader.JS=:

    #+BEGIN_SRC python :eval never
      
      for key, path in (
              ("annotator", "lib/bower_components/jquery/jquery.min.js"),
              ("annotator", "lib/annotator.1.2.7/annotator.min.js"),
              ("annotator_store", "lib/annotator.1.2.7/annotator.store.min.js"),
              ("annotator_auth", "lib/annotator.1.2.7/annotator.auth.min.js"),
              ("annotator_permissions", "lib/annotator.1.2.7/annotator.permissions.min.js"),
              ("annotator_tags", "lib/annotator.1.2.7/annotator.tags.min.js"),
              ):
          JavaScriptLoader.JS[key] = os.path.abspath(path)
      
      
    #+END_SRC

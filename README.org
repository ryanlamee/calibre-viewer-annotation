#+ARCHIVE: doc/devlog/%s_archive::

* adding annotation (read and write) capability to calibre's ebook-viewer
  
  sporadic work in progress. last updated on 2014-11-14

  [[./doc/img/ss-007.png]]
  
  There are 2 main issues we care about here, addressed in headings below

  1. importing, i.e. reading annotations made elsewhere.
  2. editing, i.e. displaying and editing annotations in calibre's
     =ebook-viewer= program. this is doable now. read below for
     details. notes are stored into an =sqlite= database using the
     =okfn/annotator= API and thus their JSON format.

* external dependencies

  - sqlalchemy
  - [[http://elixir.ematia.de/trac/wiki][elixir]]
    
  both should be installable via pip; due to *PATH HACK* below, we're
  assuming a system install where you know the inclusion path for both
  libraries

* installing+using the plugin

  With calibre 2 this is considerably easier, but this plugin is *NOT*
  pre-packaged and ready to use. This is the only method I'm familiar
  with now. A quick step by step:

  1. ensure you have a working development environment set up
  2. clone this repo
  3. visit https://github.com/okfn/annotator/downloads/ and get the
     annotator files and unzip them. I have been testing against
     version =1.2.7=.
  4. if you've unzipped e.g. annotator-full.1.2.7.zip, you should get
     a directory =annotator-full.1.2.7/= with a =.js= and a =.css= file
     inside it. Move this directory into the =ViewerAnnotationPlugin=
     directory.
  5. compile =store.coffee= to =store.js= (=coffee --compile store.coffee=)
     and put that into the =ViewerAnnotationPlugin= directory
  6. edit =ViewerAnnotationPlugin/__init__.py= and find the
     =load_javascript= and =run_javascript= sections and make sure the
     paths there correspond to your extracted annotator js/css
     files. It is currently hard-coded to expect
     =annotator-full.1.2.7/=, so if you use that version, you probably
     don't need to modify anything.
  7. edit the *PATH HACK* =ViewerAnnotationPlugin/annotator_model.py=
     so calibre is able to see your local install of =sqlalchemy= and
     =elixir=. It is currently hard-coded to search in
     =/usr/local/lib/python2.7/dist-packages=. There's probably a way
     to make this self-contained but I don't know it.
  8. in your terminal/command line program, navigate to the
     =ViewerAnnotationPlugin= directory and run =calibre-customize -b.=
     to install the plugin. If successful your =ebook-viewer= should
     incorporate the annotations. By default it will create a sqlite
     database =ebook-viewer-annotation.db= into your home directory.
     
* importing annotations

  as of now, this is a harder problem. my next investigation in this
  area will follow things discussed below like in
  =AnnotationProcessor.py= and =anchortext.py=
  
* development
  
  The base plugin code is loosely taken from [[http://manual.calibre-ebook.com/creating_plugins.html#a-user-interface-plugin][user interface plugin]],
  although the viewer plugin is slightly different. refer to the
  [[http://manual.calibre-ebook.com/plugins.html#viewer-plugins][Viewer plugins]] section in the calibre API documentation.
  
  To play with the code, edit the code in the =ViewerAnnotationPlugin=
  directory, then run

  #+BEGIN_SRC sh :eval never
    calibre-customize -b . && ebook-viewer $PATH_TO_EPUB
  #+END_SRC
  
  and it should launch the viewer with the changes applied.
  
* issues

  - either the js file inclusion or css style injection or both cause
    long pauses in the reader when navigating between epub chapter
    boundaries

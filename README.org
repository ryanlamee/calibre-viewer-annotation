#+ARCHIVE: doc/devlog/%s_archive::

* adding annotation (read and write) capability to calibre's ebook-viewer
  
  sporadic work in progress. last updated on 2014-11-14

  [[./doc/img/ss-007.png]]
  
  There are 2 main issues we care about here, addressed in headings below

  1. importing, i.e. reading annotations made elsewhere.
  2. editing, i.e. displaying and editing annotations in calibre's
     =ebook-viewer= program. this is doable now. read below for
     details. notes are stored into an =sqlite= database using the
     =okfn/annotator= API and thus their JSON format.

* external dependencies

  - sqlalchemy
  - [[http://elixir.ematia.de/trac/wiki][elixir]]
    
  both should be installable via pip; due to *PATH HACK* below, we're
  assuming a system install where you know the inclusion path for both
  libraries

** alternative installation

   you can download and extract sqlalchemy and elixir and

   - mv SQLAlchemy-0.9.8/lib/sqlalchemy calibre/lib/python2.7/site-packages
   - mv elixir calibre/lib/python2.7/site-packages

*** modifications to elixir

    edit elixir/entity.py and change ScopedSession import to 'scoped_session as ScopedSession'
    
* installing+using the plugin

  With calibre 2 this is considerably easier, but this plugin is *NOT*
  pre-packaged and ready to use. This is the only method I'm familiar
  with now. A quick step by step:

  1. ensure you have a working development environment set up
  2. clone this repo
  3. edit the *PATH HACK* =ViewerAnnotationPlugin/annotator_model.py=
     so calibre is able to see your local install of =sqlalchemy= and
     =elixir=. It is currently hard-coded to search in
     =/usr/local/lib/python2.7/dist-packages=. There's probably a way
     to make this self-contained but I don't know it.
  4. in your terminal/command line program, navigate to the
     =ViewerAnnotationPlugin= directory and run =calibre-customize -b.=
     to install the plugin. If successful your =ebook-viewer= should
     incorporate the annotations. By default it will create a sqlite
     database =ebook-viewer-annotation.db= into your home directory.
     
* importing annotations
  
  as of now, this is a harder problem. my next investigation in this
  area will follow things discussed below like in
  =AnnotationProcessor.py= and =anchortext.py=
  
** update 2014-11-28

   prelim importer logic. very hacky. briefly:

*** step 0. get node-webkit working!

   inside nw-extractor

*** npm install

    - glob, html-entities, js-yaml, xpath-range
    - browserify (needed for xpath-range)

*** build xpath-range =doMagic= function

    copy paste from https://github.com/openannotation/xpath-range, BUT you want the range *returned*, so:

    #+BEGIN_SRC javascript :eval never
      Range = require("xpath-range").Range;
      
      doMagic = function() {
        range    = getSelection().getRangeAt(0);
        bRange = new Range.BrowserRange(range);
        sRange = bRange.serialize(document.body);
        console.log(sRange);
        return sRange;
      }
      
    #+END_SRC

    save as =xpath-range.js= (we're now in =nw-extractor/node_modules/xpath-range=)

    then run =browserify xpath-range.js -o xpath-range-bundle.js=

*** compile =cfi.coffee= from calibre

    =coffee --compile cfi.coffee=

    this is what's inside =driver.js=

*** =driver.js=

    with current method, we're delegating html range finding to a spawned child window.
    since we don't want to alter the dom, we use node-webkit's =inject-js-start= and =inject-js-end=
    to send it the functions we want. so =driver.js= must contain all the range finder code.

    then append =cfi.js= into =driver.js=

*** generate highlights yml files

**** amazon kindle retrieval (ruby)

     =gem install yaml kindle_highlights=

     see =get_kindle_highlights.rb=, set your amazon email and password, then use it to generate yml files for import
     
*** get exploded epub directory

    this is generated when ebook-viewer runs. you can just =cp -r= the dir.

    or you can run the =nw-extractor= while ebook-viewer runs...

*** running the node-webkit app

    =$RUNCOMMAND= =path-to-exploded-epub-dir= =path-to-highlight-yml=

**** check the highlights + click the =test= button to see if it works

     then scroll to the bottom and click the =reconcile= button and hope it works for everything

*** import the output json

    =python importjson.py /tmp/out.json=

* development
  
  The base plugin code is loosely taken from [[http://manual.calibre-ebook.com/creating_plugins.html#a-user-interface-plugin][user interface plugin]],
  although the viewer plugin is slightly different. refer to the
  [[http://manual.calibre-ebook.com/plugins.html#viewer-plugins][Viewer plugins]] section in the calibre API documentation.
  
  To play with the code, edit the code in the =ViewerAnnotationPlugin=
  directory, then run

  #+BEGIN_SRC sh :eval never
    calibre-customize -b . && ebook-viewer $PATH_TO_EPUB
  #+END_SRC
  
  and it should launch the viewer with the changes applied.
  
** okfn/annotator files

   current code is hard-coded to expect =annotator-full.1.2.7=
   for javascript/css. For a different version:

   1. visit https://github.com/okfn/annotator/downloads/
   2. if you've unzipped e.g. annotator-full.1.2.7.zip, you should get
      a directory =annotator-full.1.2.7/= with a =.js= and a =.css= file
      inside it. Move this directory into the =ViewerAnnotationPlugin=
      directory.
   3. edit =ViewerAnnotationPlugin/__init__.py= and find the
      =load_javascript= and =run_javascript= sections and make sure the
      paths there correspond to your extracted annotator js/css
      files.

** okfn/annotator plugin (store.js)

   see =store.coffee=; =store.js= is derived from =coffee --compile store.coffee=
   then moved into =ViewerAnnotationPlugin=

* issues

  - either the js file inclusion or css style injection or both cause
    long pauses in the reader when navigating between epub chapter
    boundaries
